// ==UserScript==
// @name         Show/Hide columns
// @namespace    http://devbrainhack.co/
// @description  Show/Hide cards in columns for Trello
// @author       Alex Perez  
// @match        https://trello.com/*
// @grant unsafeWindow
// ==/UserScript==
'use strict';

/** Main Entry Point**/
// TODO: change from overkill state model to simple localStorage key/value access
// TODO: create simple way to add styles to hide/show w/ a toggle
// TODO: unconfuse states

var DEBUG = localStorage.getItem('DEBUG') == 'true';
var LOG = localStorage.getItem('LOG') == 'true';

// main routine
function doIfListsExist() {
    var lists = document.querySelectorAll('.list');

    if (lists.length > 0) {
        clearInterval(window.CHECKINTERVAL);           

        if (DEBUG) {
            testLocalStorage();
            testVM();
            return;
        }

        var states = VM.gatherBoardState(VM.currentBoard(), VM.lists());
        var board = VM.currentBoard();

        LOG && console.log('--- Loading board:', board, '---');
        LOG && console.log('states', states);
        LOG && console.log('VM.lists()', VM.lists());

        // Loop over lists
        forEach(VM.lists(), function (i, list) {
            var isHidden = states[VM.getListName(list)];

            LOG && console.log(VM.getListName(list), isHidden);

            VM.applyListState(list, isHidden);

            // always start fresh
            VM.removeListShowHide(list);

            // create the icons and set the click handler
            VM.appendListShowHideAndHandler(list, function () {
                VM.toggleList(list);

                LOG && console.log('hiding list', VM.getListName(list), VM.isListHidden(list));

                localStorage.setItem(board + '.' + VM.getListName(list), VM.isListHidden(list))
            });
        });
    }
}

// Initial run
window.CHECKINTERVAL = setInterval(doIfListsExist, 500);

// Assume menu items are generated by Trello periodically, catch their click events
document.addEventListener('click', function (e) {
    if (e.target.className.indexOf('tile-link') > -1) {
        window.CHECKINTERVAL = setInterval(doIfListsExist, 500);
    }
});


var VM = {

    lists: function () {
        return document.querySelectorAll('.list');
    },

    getListName: function (list) {
        return list.querySelector('.list-header-name').textContent;
    },

    isListHidden: function (list) {
        if (list.querySelector('.list-cards').classList.contains('hide')
            || list.querySelector('.open-card-composer').classList.contains('hide')) {
                return true;
            }

            return false;
    },

    currentBoard: function () {
        return window.location.href.split('/').filter(function (s, i, a) { return i == a.length-1; })[0];
    },

    gatherBoardState: function (board, lists) {
        var states = {};
        var numKeys = localStorage.length;
        var listNames = map(lists, function (i, list) { return this.getListName(list) }.bind(this))

        // given the list names, I can get the keys
        listNames.forEach(function (name) {
            return states[name] = localStorage.getItem(board + '.' + name) == 'true';
        })

        return states;
    },

    appendListShowHideAndHandler: function (list, callback) {
        var icon = document.createElement('span');
        icon.className = 'show-hide icon-sm icon-remove dark-hover';
        icon.addEventListener('click', callback);

        list.querySelector('.list-header').appendChild(icon);
    },

    removeListShowHide: function (list) {
        var icon = list.querySelector('.show-hide');
        try {
            icon.remove();
        } catch (e) { /* for initial load, optimal solution */}
    },

    applyListState: function (list, hide) {
        if (hide) {
            this.hideList(list);
        } else {
            this.showList(list);
        }
    },

    hideList: function (list) {
        list.querySelector('.list-cards').classList.add('hide');
        list.querySelector('.open-card-composer').classList.add('hide');
    }, 

    showList: function (list) {
        list.querySelector('.list-cards').classList.remove('hide');
        list.querySelector('.open-card-composer').classList.remove('hide');
    },

    toggleList: function (list) {
        if (list.querySelector('.list-cards').classList.contains('hide')
            || list.querySelector('.open-card-composer').classList.contains('hide')) {
                this.showList(list);
            } else {
                this.hideList(list);
            }
    },

};




/* -- Helpers -- */


// from http://toddmotto.com/ditch-the-array-foreach-call-nodelist-hack/
function forEach(array, callback, scope) {
    for (var i = 0; i < array.length; i++) {
        callback.call(scope, i, array[i]); 
    }
}

function map(array, callback, scope) {
    var arr = [];

    for (var i = 0; i < array.length; i++) {
        arr.push(callback.call(scope, i, array[i])); 
    }

    return arr;
}

// from plainjs.com
function getSiblings(el, filter) {
    var siblings = [];
    el = el.parentNode.firstChild;
    do { if (!filter || filter(el)) siblings.push(el); } while (el = el.nextSibling);
    return siblings;
}


/* --- Tests --- */


function testLocalStorage() {
    console.group('Testing - State Model')



    console.groupEnd();
}

function testVM() {
    console.group('Testing - VM');

    assert("VM.lists", VM.lists(), 'VM.lists is undefined') 

    assert("hideList", function () {
        var list = VM.lists()[0];
        VM.hideList(list);

        if (!list.querySelector('.list-cards').classList.contains('hide')
            || !list.querySelector('.open-card-composer').classList.contains('hide'))
        return assert('', false, ".hide class not applied correctly");

        // cleanup - show the list again
        list.querySelector('.list-cards').classList.remove('hide');
        list.querySelector('.open-card-composer').classList.remove('hide');

        return true;

    }, "hideList isn't hiding lists correctly")

    assert("toggleList", function () {
        var list = VM.lists()[0];

        // make sure it's visible
        list.querySelector('.list-cards').classList.remove('hide');
        list.querySelector('.open-card-composer').classList.remove('hide');

        VM.toggleList(list);

        if (!list.querySelector('.list-cards').classList.contains('hide')
            || !list.querySelector('.open-card-composer').classList.contains('hide'))
        return assert('', false, ".hide class not applied correctly");

        VM.toggleList(list);

        if (list.querySelector('.list-cards').classList.contains('hide')
            || list.querySelector('.open-card-composer').classList.contains('hide'))
        return assert('', false, ".hide class not removed correctly");

        return true;

    }, "toggleList doesn't toggle show/hide correctly");

    assert("appendListShowHideAndHandler", function () {
        var list = VM.lists()[0];

        VM.appendListShowHideAndHandler(list);

        if (!list.querySelector('.show-hide'))
            return assert('', false, "icons aren't appearing");

        // cleanup - remove the icons
        list.querySelector('.show-hide').remove();

        return true;

    }, "appendListShowHideAndHandler isn't creating the icons correctly")

    assert("removeShowHide", function () {
        var list = VM.lists()[0];

        VM.appendListShowHideAndHandler(list);
        VM.removeListShowHide(list);

        if (list.querySelector('.show-hide')) 
            return assert('', false, "show/hide icon still visible");

        return true;

    }, "removeShowHide doesn't get rid of the show/hide icons");

    assert("gatherBoardState", function () {
        var curBoard = window.location.href.split('/').filter(function (s, i, a) { return i == a.length-1; });
        var list = VM.lists()[0];
        var listName = list.querySelector('.list-header-name').textContent;

        // create a bunch of board-related localstorage entries

        var listElems = ['backlog', 'todo', 'done'].map(function (name) {
            var elem = document.createElement('div');
            elem.innerHTML = '<div class="list-header-name">' + name + '</div>';
            return elem;
        });

        LOG && console.log('listElems', listElems);

        var items = [
            [ 'board-one.backlog', 'false' ],
            [ 'board-one.todo', 'true' ],
            [ 'board-one.done', 'true' ],

            [ 'board-two.backlog', 'true' ],
            [ 'board-two.todo', 'false' ],
            [ 'board-two.done', 'true' ],

            [ 'board-three.backlog', 'true' ],
            [ 'board-three.todo', 'true' ],
            [ 'board-three.done', 'false' ],
        ];

        items.forEach(function (entry) {
            localStorage.setItem(entry[0], entry[1]);
        })

        // get the board states for board-one  
        // expect the resulting data to match the array data
        // for the board

        var states = VM.gatherBoardState('board-one', listElems);

        // this should return a hash in the form:
        // {
        //   'list name 1': boolean,
        //   'list name 2': boolean,
        //      ...
        //   'list name n': boolean,
        // }

        LOG && console.log('states', states);

        if (states['backlog'] != false) return false;
        if (states['todo'] != true) return false;
        if (states['done'] != true) return false;

        // cleanup 
        items.forEach(function (item) {
            localStorage.removeItem(item[0]);
        });

        return true;
    }, "Incorrect matches")

    assert("applyListState", function () {
        var curBoard = window.location.href.split('/').filter(function (s, i, a) { return i == a.length-1; });
        var list = VM.lists()[0];
        var listName = list.querySelector('.list-header-name').textContent;

        // make sure we start with a shown list
        VM.showList(list);

        // this should hide the list
        VM.applyListState(list, true);

        if (!list.querySelector('.list-cards').classList.contains('hide')
            || !list.querySelector('.open-card-composer').classList.contains('hide'))
        return assert('', false, "list state isn't being applied, not hiding the list");

        // cleanup - show the list again
        list.querySelector('.list-cards').classList.remove('hide');
        list.querySelector('.open-card-composer').classList.remove('hide');

        return true;

    }, "applyListState isn't working correctly")

    console.groupEnd();
}


/* -- Assertion Functions-- */

function assert(message, assertion, error) {
    var res = undefined;

    if (typeof assertion === 'function') {
        res = assertion();
    } else {
        res = assertion;
    }

    if (!res) throw new Error(message + error);

    console.log('%s %c✓', message, 'color: green;');
    return true;
}

function xassert(msg) {
    console.log("%c%s", "color: lightgray;", msg);
}
